# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0
packer {
  required_plugins {
    windows-update = {
      version = "0.15.0"
      source  = "github.com/rgl/windows-update"
    }
    azure = {
      version = ">= 2.0.4"
      source  = "github.com/hashicorp/azure"
    }
  }
}

variable "resource_group" {
  type    = string
  default = "managed-images-rg"
}

source "azure-arm" "autogenerated_1" {
  # Authentication and build settings
  polling_duration_timeout = "30m"
  location                 = "East US"
  use_azure_cli_auth       = "true"
  vm_size                  = "Standard_D8ds_v4"

  # Powershell script which adds a WinRM certificate to the Virtual Machine
  custom_script  = "powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -Command \"$userData = (Invoke-RestMethod -H @{'Metadata'='True'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text'); $contents = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($userData)); set-content -path c:\\Windows\\Temp\\userdata.ps1 -value $contents; . c:\\Windows\\Temp\\userdata.ps1;\""
  user_data_file = "./userdata.ps1"

  # Base Image
  os_type         = "Windows"
  image_offer     = "Windows-11"
  image_publisher = "MicrosoftWindowsDesktop"
  image_sku       = "win11-24h2-avd"
  image_version   = "latest"

  # Output Image
  managed_image_name                = "windows-11-avd-{{timestamp}}"
  managed_image_resource_group_name = var.resource_group

  # WinRM configuration
  winrm_port     = 5986
  communicator   = "winrm"
  winrm_use_ssl  = true
  winrm_insecure = true
  winrm_timeout  = "5m"
  winrm_username = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  # Install Visual Studio Code and Git for Windows
  provisioner "powershell" {
    inline = [
      "New-Item -ItemType Directory -Path 'c:/Software' -Force",
      "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
      "Write-Output 'Installing Visual Studio Code'",
      "Invoke-RestMethod -uri 'https://code.visualstudio.com/sha/download?build=stable&os=win32-x64' -OutFile 'c:/Software/VSCodeSetup-x64-1.87.2.exe'",
      "Start-Process c:/Software/VSCodeSetup-x64-1.87.2.exe -ArgumentList '/VERYSILENT /NORESTART /MERGETASKS=!runcode' -Wait",
      "Write-Output 'Installing Git for Windows'",
      "Invoke-RestMethod -uri 'https://github.com/git-for-windows/git/releases/download/v2.44.0.windows.1/Git-2.44.0-64-bit.exe' -OutFile 'c:/Software/Git-2.44.0-64-bit.exe'",
      "Start-Process c:/Software/Git-2.44.0-64-bit.exe -ArgumentList '/SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART' -Wait"
    ]
  }

    # Install applications via WinGet using the CLI directly
  provisioner "powershell" {
    inline = [
      "Write-Output 'Checking if WinGet is installed...'",
      "if (-not (Test-Path \"C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_*\\winget.exe\")) {",
      "    Write-Output 'WinGet is not installed. Skipping installation of applications via WinGet.'",
      "} else {",
      "    Write-Output 'WinGet is installed. Proceeding with package installation...'",
      "    $apps = @(",
      "        'ScooterSoftware.BeyondCompare.4',",
      "        'Kitware.CMake',",
      "        'Microsoft.VisualStudio.2022.Professional',",
      "        'AgileBits.1Password',",
      "        'AgileBits.1Password.CLI',",
      "        'jdx.mise',",
      "        'Canonical.Ubuntu',",
      "        'Microsoft.WindowsTerminal',",
      "        'Microsoft.WSL'",
      "    )",
      "    foreach ($app in $apps) {",
      "        Write-Output \"Installing $app via WinGet...\"",
      "        Start-Process -FilePath winget -ArgumentList 'install --id', $app, '-e --accept-source-agreements --accept-package-agreements' -NoNewWindow -Wait",
      "    }",
      "}"
    ]
  }


  # Run Windows updates
  provisioner "windows-update" {
    search_criteria = "IsInstalled=0"
    filters = [
      "exclude:$_.Title -like '*Preview*'",
      "include:$true",
    ]
    update_limit = 25
  }

  # Sysprep
  provisioner "powershell" {
    inline = [
      "if (Test-Path \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\") { Remove-Item \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\" -Force }",
      "& \"$Env:SystemRoot\\System32\\Sysprep\\Sysprep.exe\" /oobe /generalize /shutdown /quiet"
    ]
  }
}
