# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0
packer {
  required_plugins {
    windows-update = {
      version = "0.15.0"
      source  = "github.com/rgl/windows-update"
    }
    azure = {
      version = ">= 2.0.4"
      source  = "github.com/hashicorp/azure"
    }
  }
}

variable "resource_group" {
  type    = string
  default = "managed-images-rg"
}

source "azure-arm" "autogenerated_1" {
  polling_duration_timeout = "30m"
  location                 = "East US"
  use_azure_cli_auth       = "true"
  vm_size                  = "Standard_D8ds_v4"

  custom_script  = "powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -Command \"$userData = (Invoke-RestMethod -H @{'Metadata'='True'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text'); $contents = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($userData)); set-content -path c:\\Windows\\Temp\\userdata.ps1 -value $contents; . c:\\Windows\\Temp\\userdata.ps1;\""
  user_data_file = "./userdata.ps1"

  os_type         = "Windows"
  image_offer     = "Windows-11"
  image_publisher = "MicrosoftWindowsDesktop"
  image_sku       = "win11-24h2-avd"
  image_version   = "latest"

  managed_image_name                = "windows-11-avd-{{timestamp}}"
  managed_image_resource_group_name = var.resource_group

  winrm_port     = 5986
  communicator   = "winrm"
  winrm_use_ssl  = true
  winrm_insecure = true
  winrm_timeout  = "5m"
  winrm_username = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  # First, upload your local winget-install.ps1 to the VM.
  provisioner "file" {
    source      = "./winget-install.ps1"
    destination = "C:\\Windows\\Temp\\winget-install.ps1"
  }

  # Then, copy the script into a folder that is (or can be added to) the PATH,
  # so that the winget-install command becomes available.
  provisioner "powershell" {
    inline = [
      "Write-Output 'Installing applications with Winget using asheroto/winget-install...'",
      "Set-ExecutionPolicy Bypass -Scope Process -Force",
      "",
      "# Define a target folder (inside the current userâ€™s Documents folder) for scripts",
      "$targetDir = \"$env:USERPROFILE\\Documents\\WindowsPowerShell\\Scripts\"",
      "if (!(Test-Path $targetDir)) { New-Item -Path $targetDir -ItemType Directory | Out-Null }",
      "",
      "# Copy the local winget-install script into that folder",
      "Copy-Item 'C:\\Windows\\Temp\\winget-install.ps1' \"$targetDir\\winget-install.ps1\" -Force",
      "",
      "# Add the target folder to the PATH for this session",
      "$env:PATH += \";$targetDir\"",
      "",
      "# Now call winget-install with your list of apps",
      "winget-install -Apps 'ScooterSoftware.BeyondCompare4','Git.Git','GitHub.cli','Microsoft.GitCredentialManagerCore','Microsoft.PowerShell','Microsoft.WindowsTerminal','Kitware.CMake','Microsoft.VisualStudio.2022.Professional','Microsoft.VisualStudioCode','AgileBits.1Password','AgileBits.1Password.CLI','Canonical.Ubuntu.2204'"
    ]
  }

  provisioner "windows-update" {
    search_criteria = "IsInstalled=0"
    filters = [
      "exclude:$_.Title -like '*Preview*'",
      "include:$true",
    ]
    update_limit = 25
  }

  provisioner "powershell" {
    inline = [
      "if (Test-Path \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\") { Remove-Item \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\" -Force }",
      "& \"$Env:SystemRoot\\System32\\Sysprep\\Sysprep.exe\" /oobe /generalize /shutdown /quiet"
    ]
  }
}
