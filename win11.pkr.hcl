# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0
packer {
  required_plugins {
    windows-update = {
      version = "0.15.0"
      source  = "github.com/rgl/windows-update"
    }
    azure = {
      version = ">= 2.0.4"
      source  = "github.com/hashicorp/azure"
    }
  }
}

variable "resource_group" {
  type    = string
  default = "managed-images-rg"
}

source "azure-arm" "autogenerated_1" {
  polling_duration_timeout = "30m"
  location                 = "East US"
  use_azure_cli_auth       = "true"
  vm_size                  = "Standard_D16ds_v4"

  custom_script  = "powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -Command \"$userData = (Invoke-RestMethod -H @{'Metadata'='True'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text'); $contents = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($userData)); set-content -path c:\\Windows\\Temp\\userdata.ps1 -value $contents; . c:\\Windows\\Temp\\userdata.ps1;\""
  user_data_file = "./userdata.ps1"

  os_type         = "Windows"
  image_offer     = "Windows-11"
  image_publisher = "MicrosoftWindowsDesktop"
  image_sku       = "win11-24h2-avd"
  image_version   = "latest"

  managed_image_name                = "windows-11-avd-{{timestamp}}"
  managed_image_resource_group_name = var.resource_group

  winrm_port     = 5986
  communicator   = "winrm"
  winrm_use_ssl  = true
  winrm_insecure = true
  winrm_timeout  = "5m"
  winrm_username = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  # Upload your local winget-install.bat to the VM.
  provisioner "file" {
    source      = "./winget-install.bat"
    destination = "C:\\Windows\\Temp\\winget-install.bat"
  }

  # Schedule a task to run the batch script in an interactive context.
  provisioner "powershell" {
    inline = [
      "Write-Output 'Scheduling winget-install batch task due to WinRM limitations...'",
      "$taskName = 'WingetBatchTask'",
      "$batchPath = 'C:\\Windows\\Temp\\winget-install.bat'",
      "# Calculate a start time one minute in the future",
      "$startTime = (Get-Date).AddMinutes(1).ToString('HH:mm')",
      "# Create a scheduled task that runs the batch file with highest privileges",
      "schtasks /Create /TN $taskName /TR \"cmd.exe /c %windir%\\Temp\\winget-install.bat\" /SC ONCE /ST $startTime /RL HIGHEST /F",
      "# Run the scheduled task immediately",
      "schtasks /Run /TN $taskName",
      "Write-Output 'Waiting for scheduled task to complete (approx. 3 minutes)...'",
      "Start-Sleep -Seconds 180",
      "# Delete the scheduled task",
      "schtasks /Delete /TN $taskName /F"
    ]
  }

  provisioner "windows-update" {
    search_criteria = "IsInstalled=0"
    filters = [
      "exclude:$_.Title -like '*Preview*'",
      "include:$true"
    ]
    update_limit = 25
  }

  provisioner "powershell" {
    inline = [
      "if (Test-Path \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\") { Remove-Item \"$Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml\" -Force }",
      "& \"$Env:SystemRoot\\System32\\Sysprep\\Sysprep.exe\" /oobe /generalize /shutdown /quiet"
    ]
  }
}
